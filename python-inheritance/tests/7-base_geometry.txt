>>> batry = __import__('7-base_geometry').BaseGeometry


CALLING area():
	>>> ba = batry()
	>>> ba.area()
	Traceback (most recent call last):
	Exception: area() is not implemented



integer_validator() TESTING:

STRING NAME, INTEGER VALUE:
	>>> ba = batry()
	>>> ba.integer_validator("something", 9)

EMPTY STRING NAME, INTEGER VALUE:
	>>> ba = batry()
	>>> ba.integer_validator("", 12)

INTEGER NAME AND INTEGER VALUE:
	>>> ba = batry()
	>>> ba.integer_validator(1, 1)

STIRNG ARGUMENT:
	>>> ba = batry()
	>>> ba.integer_validator("something", "something2")
	Traceback (most recent call last):
	TypeError: something must be an integer

NEGATIVE ARGUMENT:
	>>> ba = batry()
	>>> ba.integer_validator("something", -400)
	Traceback (most recent call last):
	ValueError: something must be greater than 0

ZERO ARGUMENT:
	>>> ba = batry()
	>>> ba.integer_validator("something", 0)
	Traceback (most recent call last):
	ValueError: something must be greater than 0

BOOL ARGUMENT:
        >>> ba = batry()
        >>> ba.integer_validator("something", True)
        Traceback (most recent call last):
        TypeError: something must be an integer

TUPLE ARGUMENT:
        >>> ba = batry()
        >>> ba.integer_validator("something", (1, ))
        Traceback (most recent call last):
        TypeError: something must be an integer

LIST ARGUMENT:
        >>> ba = batry()
        >>> ba.integer_validator("something", [1, ])
        Traceback (most recent call last):
        TypeError: something must be an integer

FLOAT ARGUMENT:
        >>> ba = batry()
        >>> ba.integer_validator("something", 1.1)
        Traceback (most recent call last):
        TypeError: something must be an integer

SET ARGUMENT
        >>> ba = batry()
        >>> ba.integer_validator("something", {1, })
        Traceback (most recent call last):
        TypeError: something must be an integer

COMPLEX ARGUMENT:
        >>> ba = batry()
        >>> ba.integer_validator("something", 6j)
        Traceback (most recent call last):
        TypeError: something must be an integer

INFINITY ARGUMENT:
	>>> ba = batry()
	>>> ba.integer_validator("something", float("nan"))
        Traceback (most recent call last):
        TypeError: something must be an integer

INTDETERMINATE ARGUMENT:
        >>> ba = batry()
        >>> ba.integer_validator("something", float("inf"))
        Traceback (most recent call last):
        TypeError: something must be an integer

NONE ARGUMENT:
        >>> ba = batry()
        >>> ba.integer_validator("something", None)
        Traceback (most recent call last):
        TypeError: something must be an integer

NO name ARGUMENT:
        >>> ba = batry()
        >>> ba.integer_validator("something")
        Traceback (most recent call last):
        TypeError: integer_validator() missing 1 required positional argument: 'value'

NO ARGUMENTS PASSED:
        >>> ba = batry()
        >>> ba.integer_validator()
        Traceback (most recent call last):
        TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

THRE ARGUMENTS PASSED:
	>>> ba = batry()
        >>> ba.integer_validator("something", 21, "third")
        Traceback (most recent call last):
	TypeError: integer_validator() takes 3 positional arguments but 4 were given
